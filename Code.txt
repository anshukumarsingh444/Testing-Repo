SORTINGS:

1> Bubble Sort :

public class BubbleSortAlgo {
    public static void printArray(int arr[]){
        for (int i=0; i< arr.length; i++){
            System.out.print(arr[i]+" ");
        }
    }
    public static void main(String[] args) {
        int arr[] = {10, 12, 9, 15,96};
        for(int i=0; i<arr.length; i++){
            for (int j=0; j< arr.length-i-1; j++){
                if(arr[j]>arr[j+1]){
                    int temp = arr[j];
                    arr[j] =arr[j+1];
                    arr[j+1] = temp;
                }
            }
        }
        printArray(arr);
    }
    // TC : O(n*n)
}


2> Insertion Sort :

public class InsertionSort {
    public static void main(String[] args) {
        int arr[] = {10, 20, -1, -5, 7};
        int n = arr.length;

        for(int i=0; i< arr.length; i++){
            System.out.print(arr[i]+" ");
        }

        System.out.println();
        for(int i=1; i<n; i++){
            int hole = i;
            int value = arr[i];
            while(hole>0 && arr[hole-1]>value){
                // copy
                arr[hole] = arr[hole-1];
                hole--;
            }
            arr[hole] = value;
        }
        // TC :  O(n^2)
        // SC : O(1)
        for(int i=0; i< arr.length; i++){
            System.out.print(arr[i]+" ");
        }
        System.out.println();
    }

}

3> Merge Sort :

public class MergeSort {
    public static void merge(int arr[], int l, int mid, int r){
        int n1 = mid-l+1; // 1-0+1
        int n2 = r-mid; // 3-1 = 2

        int a1[] = new int[n1];
        int a2[] = new int[n2];

        for (int i=0; i<n1; i++){
            a1[i] = arr[l+i]; //0+0
        }
        for (int j=0; j<n2; j++){
            a2[j] = arr[mid+j+1]; // 1+0
        }

        int i=0, j=0, k=l;

        while (i<n1 && j<n2){
            if(a1[i]<a2[j]){
                // a1[i] smaller
                arr[k] = a1[i];
                i++;
            }else {
                arr[k] = a2[j];
                j++;
            }
            k++;
        }
        while (i<n1){
            arr[k] = a1[i];
            i++;
            k++;
        }
        while (j<n2){
            arr[k] = a2[j];
            j++;
            k++;
        }
    }
    public static void mergeSort(int arr[], int l, int r){
        if(l<r){
            int mid = (l+r)/2;
            mergeSort(arr, l, mid);      // [l..mid]
            mergeSort(arr, mid+1, r); // [mid+1...r]
            merge(arr, l, mid, r);       // [l,r] -> sorted
        }
    }
    public static void main(String[] args) {
        int arr[] = {25, -7, 4, 18, 10};
        int n = arr.length;
        for (int num:arr){
            System.out.print(num+" ");
        }
        System.out.println();
        mergeSort(arr, 0, n-1);
        for (int num:arr){
            System.out.print(num+" ");
        }
    }
}
// TC = O(logn )
// SC = O(n)


4> Merge Two Sorted Array : 

public class MergeTwoSortedArrays {
    public static void main(String[] args) {
        int a1[] = {1, 3, 5, 7, 14, 22};
        int a2[]  = {2, 4, 6, 11, 17, 19, 27, 41 };
        int n1 = a1.length;
        int n2 = a2.length;
        int result[] = new int[n1+n2];
        int i=0, j=0, k=0;
        while (i<n1 && j<n2){
            if(a1[i]<a2[j]){
                // a1[i] smaller
                result[k] = a1[i];
                i++;
            }else {
                result[k] = a2[j];
                j++;
            }
            k++;
        }
       while (i<n1){
         result[k] = a1[i];
         i++;
         k++;
       }
       while (j<n2){
           result[k] = a2[j];
           j++;
           k++;
       }
       // TC : O(n1+n2), SC : O(n1+n2)
        // TC : O(n), SC : O(n)

        for ( i=0; i<n1+n2; i++){
            System.out.print(result[i]+" ");
        }
        System.out.println();
    }
}


5> Quick Sort : 

public class QuickSort {
    public static void swap(int arr[], int idx1, int idx2){
        int temp = arr[idx1];
        arr[idx1] = arr[idx2];
        arr[idx2] = temp;
    }
    public static int partition(int arr[], int l, int r){
        int pivotVal = arr[r];
        int i = l - 1;
        for(int j = l; j<r; j++){
            if(arr[j]<pivotVal){
                i++;
                swap(arr, i, j);
            }
        }
        i++;
        swap(arr, i, r);
        return i;
    }
    public static void quickSort(int arr[], int l, int r){
        if(l<r){
     int pivotIndex = partition(arr, l, r);
     quickSort(arr, l, pivotIndex-1);
     quickSort(arr, pivotIndex+1, r);
    }
    }
    public static void main(String[] args) {
        int arr[] = {25, -7, 4, 18, 10};
        int n = arr.length;
        for (int num:arr){
            System.out.print(num+" ");
        }
        System.out.println();
        quickSort(arr, 0, n-1);
        for (int num:arr){
            System.out.print(num+" ");
        }
        // worst case; TC : O(n^2) ; SC : O(1)
        // avg case; TC : O(n log n) ; SC : O(1)
        // best case; TC : O(n log n) ; SC : O(1)
        }
}


6> Selection Sort :

public class SelectionSort {
    public  static void printArray(int arr[]){
        for (int i=0; i< arr.length; i++){
            System.out.print(arr[i]+" ");
        }
        System.out.println();
    }
    public static void main(String[] args) {
        int arr[] = {7,8,3,1,2};
        for (int i=0; i<arr.length-1; i++ ){
            int smallest = i;
            for(int j=i+1; j< arr.length; j++){
                if(arr[smallest]>arr[j]){
                    smallest = j;
                }
            }
            int temp = arr[smallest];
            arr[smallest] = arr[i];
            arr[i] = temp;
        }
        printArray(arr);
    }
    // TC : O(n*n)
}




SEARCHING : 

1> Linear Search : 

public class LinearSearch {
    public static void main(String[] args) {
        int arr[] = {10, 20, -1, -9, 22, 7};
        int n = arr.length;
        int k = 22;
        int index = -1; // assume k is not found
        for (int i=0; i<n; i++){
            if(arr[i] == k){ // found it
               index = i;
               break;
            }
        }
        System.out.println(index);
        // TC : O(n)
        // SC : O(1)
    }
}


2> Binary Search : 

public class BinarySearch {
    public static void main(String[] args) {
        int arr[] = {1, 2, 3, 4, 19, 29, 34, 44};
        int n = arr.length;
        int k = 1;
        int left = 0, right = n-1, index = -1;
        while (left<=right){
            int mid = (left+right)/2;
            if(arr[mid]==k){
                index = mid;
                break;
            }
           else if(arr[mid]>k){
                right = mid-1;
            }else{
                left = mid+1;
            }
        }
        System.out.println(index);
    }
}



ARRAY : 

1> Sum Of The Elements of Array

import java.util.Scanner;
public class SumOfElementsOfTheArray {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = 5;
        int arr[] = new int[n];

        for(int i=0;i<n;i++){
            arr[i] = sc.nextInt();
        }
        for(int j=0;j<n;j++) {
            System.out.print(arr[j]+" ");
        }
        System.out.println();
        int sum = 0;
        for(int i=0;i<n;i++){
            sum = sum + arr[i];
        }
        System.out.println(sum);
    }
}

2> Print Matrix

import java.util.Scanner;

public class PrintMatrix {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int rows = sc.nextInt();
        int cols = sc.nextInt();

        int arr[][] = new int[rows][cols];


        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < cols; c++) {
                arr[r][c] = sc.nextInt();
            }
        }
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < cols; c++) {
                System.out.print(arr[r][c] + " ");
            }
            System.out.println();

        }
    }
}

3> InputOutput(Print max )

import java.util.Scanner;

public class InputOutput {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String line = sc.nextLine();
        int n = Integer.parseInt(line);
        int arr[] = new int[n];
        String nums = sc.nextLine();
                String temp[] = nums.split(" ");
        for(int i=0; i<n; i++){
            arr[i] = Integer.parseInt(temp[i]);
        }
        int maxiIndex = 0;
        for(int i=1; i<n; i++){
            if(arr[maxiIndex]<arr[i]){
                maxiIndex = i;
            }
        }
        System.out.println(arr[maxiIndex]);
            }
        }


4> Matrix Addition

public class MatrixAddition {
    public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    // Get Matrix 1 from user
    int r1 = sc.nextInt();
    int c1 = sc.nextInt();

    int arr1[][] = new int[r1][c1];
    for(int r=0; r<r1; r++){
        for(int c=0; c<c1; c++){
            arr1[r][c] = sc.nextInt();

        }
    }

    // Get Matrix 2 from user
        int r2 = sc.nextInt();
    int c2 = sc.nextInt();

    int arr2[][] = new int[r2][c2];
    for(int r=0; r<r2; r++){
        for(int c=0; c<c2; c++){
            arr2[r][c] = sc.nextInt();
        }
    }

    for(int r=0; r<r1; r++){
        for(int c=0; c<c1; c++){
            int ans = arr1[r][c]+arr2[r][r];
            System.out.print(ans+" ");
        }
        System.out.println();
    }

    }
}


5> Matrix Multiplication

package Array;


import java.util.Scanner;

public class MatrixMultiplication{
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int rows1 = sc.nextInt();
        int cols1 = sc.nextInt();
        int m1[][] = new int[rows1][cols1];
        for(int r=0; r<rows1; r++){
            for(int c=0; c<cols1; c++){
                m1[r][c] = sc.nextInt();
            }
        }
        int rows2 = sc.nextInt();
        int cols2 = sc.nextInt();
        int m2[][] = new int[rows2][cols2];
        for(int r=0; r<rows2; r++){
            for(int c=0; c<cols2; c++ ){
                m2[r][c] = sc.nextInt();
            }
        }
        int result[][] = new int[rows1][cols2];

        for(int r=0; r<rows1; r++){
            for(int c=0; c<cols2; c++){
                for(int k=0; k<rows2; k++){
                    result[r][c] = result[r][c] + (m1[r][k] * m2[k][c]);
                }

            }
        }
        for(int r=0; r<rows1; r++){
            for(int c=0; c<cols2; c++){
                System.out.print(result[r][c]+" ");
            }
            System.out.println();
        }
    }
}


6> Rectangle(AssignmentQuestion)

import java.util.Scanner;
public class Rectangle {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int m = sc.nextInt();
        int n = sc.nextInt();

        for(int i = 1 ; i<=n; i++){
            System.out.print("*");
        }
        System.out.println();
        for(int i = 1; i<=m-2;i++){
            System.out.print("*");
            for(int j = 1; j<=n-2;j++){
                System.out.print(" ");
            }
            System.out.println("*");
        }
        for(int i = 1 ; i<=n; i++){
            System.out.print("*");
        }
    }
}
